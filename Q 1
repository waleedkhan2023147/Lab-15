"""
Abstract Base Classes and Multiple Inheritance: Use an abstract base class with multiple
child classes inheriting specific functionalities and overriding methods.
"""

from abc import ABC, abstractmethod

# Abstract base class
class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

    @abstractmethod
    def perimeter(self):
        pass

# Child class 1: Rectangle
class Rectangle(Shape):
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width

    def perimeter(self):
        return 2 * (self.length + self.width)

# Child class 2: Circle
class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius**2

    def perimeter(self):
        return 2 * 3.14 * self.radius

# Example usage
rectangle = Rectangle(length=5, width=3)
circle = Circle(radius=4)

# Output results
print(f"Rectangle Area: {rectangle.area()}, Perimeter: {rectangle.perimeter()}")
print(f"Circle Area: {circle.area()}, Perimeter: {circle.perimeter()}")
